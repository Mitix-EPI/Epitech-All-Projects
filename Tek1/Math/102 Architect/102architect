#!/usr/bin/env python3

import sys
import os
import math
import six

def print_help():
    print("USAGE\n    ./102architect x y transfo1 arg11 [arg12] [transfo2 arg12 [arg22]] ...\n\nDESCRIPTION\n    x  abscissa of the original point\n    y  ordinate of the original point\n\n    transfo arg1 [arg2]\n    -t i j  translation along vector (i, j)\n    -z m n  scaling by factors m (x-axis) and n (y-axis)\n    -r d    rotation centered in O by a d degree angle\n    -s d    reflection over the axis passing through O with an inclination\n\t    angle of d degrees")

def translation(x, y, a, b, matrice):
    print("Translation along vector (", int(a), ", ", int(b), ")", sep = "")
    matrice[2] += a
    matrice[5] += b

def scaling(x, y, a, b, matrice):
    print("Scaling by factors ", int(a), " and ", int (b), sep = "")
    matrice[0] *= a
    matrice[4] *= b

def rotation(x, y, a, matrice):
    print("Rotation by a ", int(a), " degree angle", sep = "")
    matrice[0] *= math.cos(a / 180 * math.pi)
    matrice[1] += -math.sin(a / 180 * math.pi)
    matrice[3] += math.sin(a / 180 * math.pi)
    matrice[4] *= math.cos(a / 180 * math.pi)


def reflection(x, y, a, matrice):
    print("Reflection over an axis with an inclination angle of ", int(a), " degrees", sep = "")
    matrice[0] *= math.cos(2 * (a / 180) * math.pi)
    matrice[1] += math.sin(2 * (a / 180) * math.pi)
    matrice[3] += math.sin(2 * (a / 180) * math.pi)
    matrice[4] *= -math.cos(2 * (a / 180) * math.pi)


def main() :
    argv_list = [ "-t", "-z", "-s", "-r"]

    if len(sys.argv) == 2:
        if sys.argv[1] == "-h":
            print_help()
            sys.exit(0)

    try :
        x = int(sys.argv[1])
        y = int(sys.argv[2])
    except :
        sys.exit(84)

    matrice = [1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00]
    #le plan est de la sorte
    # 1.00 0.00 0.00
    # 0.00 1.00 0.00
    # 0.00 0.00 1.00


    if (sys.argv[3].isdigit()):
        sys.exit(84)
    if (sys.argv[3][0] != '-'):
        sys.exit(84)

    if (len(sys.argv) != 6 and (sys.argv[3] != "-t" and sys.argv[3] != "-z" and sys.argv[3] != "-r" and sys.argv[3] != "-s")):
        sys.exit(84)
    if ((sys.argv[3] == "-r" or sys.argv[3] == "-s") and len(sys.argv) != 5):
        sys.exit(84)
    if (len(sys.argv) == 7):
        sys.exit(84)

    for i in range(len(sys.argv)) :
        if sys.argv[i] == "-t":
            try :
                translation(float (x), float(y), float(sys.argv[i+1]), float(sys.argv[i+2]), matrice)
            except :
                sys.exit(84)
        elif sys.argv[i] == "-z":
            try :
                scaling(float(x), float(y), float(sys.argv[i+1]), float(sys.argv[i+2]), matrice)
            except :
                sys.exit(84)
        elif sys.argv[i] == "-r":
            try :
                rotation(float(x), float(y), float(sys.argv[i+1]), matrice)
            except :
                sys.exit(84)
        elif sys.argv[i] == "-s":
            try :
                reflection(float(x), float(y), float(sys.argv[i+1]), matrice)
            except :
                sys.exit(84)
        elif sys.argv[i][0] == "-" and sys.argv[i][1] != "t" and sys.argv[i][1] != "s" and sys.argv[i][1] != "r" and sys.argv[i][1] != "z":
            try :
                int(sys.argv[i])
            except :
                sys.exit(84)



    print("%.2f"%matrice[0], "\t%.2f"%matrice[1], "\t%.2f"%matrice[2], sep = "")
    print("%.2f"%matrice[3], "\t%.2f"%matrice[4], "\t%.2f"%matrice[5], sep = "")
    print("%.2f"%matrice[6], "\t%.2f"%matrice[7], "\t%.2f"%matrice[8], sep = "")
    x1 = matrice[0] * float(x) + matrice[1] * float(y) + matrice[2]
    y1 = matrice[3] * float(x) + matrice[4] * float(y) + matrice[5]
    print("(%.2f"%x,", %.2f"%y,") => (%.2f"%x1,", %.2f"%y1,")", sep = "")

main()
#!/usr/bin/env python3

from cipher import cipher
from tkinter import PhotoImage
import tkinter as tk
from tkinter import font  as tkfont
from cesar import cesar_crypted
from cesar import cesar_decrypted
from cesar import try_force_brut
import os
import pygame

class SampleApp(tk.Tk):

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.title("Programmes de cryptage")
        self.tk.call('wm', 'iconphoto', self._w, PhotoImage(file = 'assets/anonymous.png'))
        pygame.init()
        son = pygame.mixer.Sound('assets/Pnl-Au-DD.ogg')
        son.play(-1)
        self.minsize(1200, 800)
        self.maxsize(1200, 800)
        self.geometry("1600x1000+320+150")
        self.title_font = tkfont.Font(family='Helvetica', size=18, weight="bold", slant="italic")
        self.title_font10 = "-family {DejaVu Sans} -size 20 -weight normal -underline 0 -overstrike 0"
        # the container is where we'll stack a bunch of frames
        # on top of each other, then the one we want visible
        # will be raised above the others
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        for F in (StartPage, PageOne, PageTwo, PageThree):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame

            # put all of the pages in the same location;
            # the one on the top of the stacking order
            # will be the one that is visible.
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame("StartPage")

    def show_frame(self, page_name):
        '''Show a frame for the given page name'''
        frame = self.frames[page_name]
        frame.tkraise()

class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text = "\nChoississez une méthode de cryptage\n\n", font=controller.title_font10)
        space = tk.Label(self, text = "\n\n")
        space1 = tk.Label(self, text = "\n\n")

        button1 = tk.Button(self, text="103 Cipher", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 10, height = 1, command=lambda: controller.show_frame("PageOne"))
        button2 = tk.Button(self, text="Code César", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 10, height = 1, command=lambda: controller.show_frame("PageTwo"))

        button3 = tk.Button(self, text="Force DD", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 10, height = 1, command=lambda: controller.show_frame("PageThree"))


        label.pack(side="top", fill="x", pady=10)
        button1.pack()
        space.pack()
        space.pack()
        button2.pack()
        space1.pack()
        button3.pack()


class PageOne(tk.Frame):

    def validation_cryptage(self, message_a_encrypter, key_pour_encrypter):
        msg = message_a_encrypter
        key = key_pour_encrypter
        if (msg == "" or key == ""):
            self.text1.config(text = "Veuillez rentrer les informations données")
            return (0)
        i = 0
        self.text1.config(text = str(cipher(msg, key, i)))

    def validation_decryptage(self, message_a_decrypter, key_pour_decrypter):
        msg = message_a_decrypter
        key = key_pour_decrypter
        if (msg == "" or key == ""):
            self.text2.config(text = "Veuillez rentrer les informations données")
            return (0)
        i = 1
        # print(msg)
        # print(key)
        res = str(cipher(msg, key, i))
        if (res == "0"):
            res = "error calcul"
        self.text2.config(text = res)

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="Rentrez un message que vous voulez crypter", font=controller.title_font, fg = "green")
        label_key = tk.Label(self, text="Rentrer votre clé de sécurité", font=controller.title_font, fg = "green")
        label1 = tk.Label(self, text="Rentrez un message que vous voulez décrypter", font=controller.title_font, fg = "red")
        label2 = tk.Label(self, text="Rentrer votre clé de sécurité", font=controller.title_font, fg = "red")
        space = tk.Label(self, text = "\n\n")
        space1 = tk.Label(self, text = "\n\n")
        space2 = tk.Label(self, text = "\n\n")
        space4 = tk.Label(self, text = "\n\n")
        space5 = tk.Label(self, text = "\n\n")
        space6 = tk.Label(self, text = "\n\n")
        space7 = tk.Label(self, text = "\n\n")
        space8 = tk.Label(self, text = "\n\n")
        self.message_a_encrypter = tk.Entry(self, width = 50)
        self.key_pour_encrypter = tk.Entry(self, width = 50)
        self.message_a_decrypter = tk.Entry(self, width = 50)
        self.key_pour_decrypter = tk.Entry(self, width = 50)
        self.text1 = tk.Label(self, text="", font=controller.title_font, fg = "red", wraplength = 400)
        self.text2 = tk.Label(self, text="", font=controller.title_font, fg = "red", wraplength = 400)
        button_validate = tk.Button(self, text = "Appuyez pour crypter", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 20, height = 1, command = lambda: self.validation_cryptage(self.message_a_encrypter.get(), self.key_pour_encrypter.get()))
        button_validate2 = tk.Button(self, text = "Appuyez pour décrypter", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 20, height = 1, command = lambda: self.validation_decryptage(self.message_a_decrypter.get(), self.key_pour_decrypter.get()))
        button_effacer = tk.Button(self, text = "Effacer", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 20, height = 1, command = self.effacer)
        button = tk.Button(self, text="Retour", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 10, height = 1, command=lambda: controller.show_frame("StartPage"))

        self.columnconfigure(2, weight = 20)

        label.grid(row = 0, column = 0)
        space8.grid(row = 1, column = 0)
        self.message_a_encrypter.grid(row = 2, column = 0)
        space.grid(row = 3, column = 0)
        label_key.grid(row = 4, column = 0)
        space1.grid(row = 5, column = 0)
        self.key_pour_encrypter.grid(row = 6, column = 0)
        space2.grid(row = 7, column = 0)
        button_validate.grid(row = 8, column = 0)
        self.text1.grid(row = 9, column = 0)
        #space3.grid(row = 0, column = 40)
        label1.grid(row = 0, column = 150)
        space6.grid(row = 1, column = 150)
        self.message_a_decrypter.grid(row = 2, column = 150)
        space4.grid(row = 3, column = 150)
        label2.grid(row = 4, column = 150)
        space7.grid(row = 5, column = 150)
        self.key_pour_decrypter.grid(row = 6, column = 150)
        space5.grid(row = 7, column = 150)
        button_validate2.grid(row = 8, column = 150)
        self.text2.grid(row = 9, column = 150)
        button_effacer.grid(row = 5, column = 2)
        button.grid(row = 10, column = 2)

    def effacer(self):
        self.message_a_encrypter.delete(0, 'end')
        self.message_a_decrypter.delete(0, 'end')
        self.key_pour_encrypter.delete(0, 'end')
        self.key_pour_decrypter.delete(0, 'end')
        self.text1.config(text = "")
        self.text2.config(text = "")
        os.system('clear')


class PageTwo(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="Rentrez un message que vous voulez crypter", font=controller.title_font, fg = "blue")
        label_key = tk.Label(self, text="Rentrez le nombre de décalage", font=controller.title_font, fg = "blue")
        label1 = tk.Label(self, text="Rentrez un message que vous voulez décrypter", font=controller.title_font, fg = "purple")
        label2 = tk.Label(self, text="Rentrer le nombre de décalage", font=controller.title_font, fg = "purple")
        space = tk.Label(self, text = "\n\n")
        space1 = tk.Label(self, text = "\n\n")
        space2 = tk.Label(self, text = "\n\n")
        space4 = tk.Label(self, text = "\n\n")
        space5 = tk.Label(self, text = "\n\n")
        space6 = tk.Label(self, text = "\n\n")
        space7 = tk.Label(self, text = "\n\n")
        space8 = tk.Label(self, text = "\n\n")
        self.message_a_encrypter = tk.Entry(self, width = 50)
        self.key_pour_encrypter = tk.Entry(self, width = 50)
        self.message_a_decrypter = tk.Entry(self, width = 50)
        self.key_pour_decrypter = tk.Entry(self, width = 50)
        button_validate = tk.Button(self, text = "Appuyez pour crypter", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 20, height = 1, command = lambda: self.validation_cryptage(self.message_a_encrypter.get(), self.key_pour_encrypter.get()))
        button_validate2 = tk.Button(self, text = "Appuyez pour décrypter", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 20, height = 1, command = lambda: self.validation_decryptage(self.message_a_decrypter.get(), self.key_pour_decrypter.get()))
        button_effacer = tk.Button(self, text = "Effacer", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 20, height = 1, command = self.effacer)
        button = tk.Button(self, text="Retour", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 10, height = 1, command=lambda: controller.show_frame("StartPage"))
        self.text1 = tk.Label(self, font=controller.title_font, fg = "black")
        self.text2 = tk.Label(self, font=controller.title_font, fg = "black")
        self.columnconfigure(2, weight = 20)

        label.grid(row = 0, column = 0)
        space8.grid(row = 1, column = 0)
        self.message_a_encrypter.grid(row = 2, column = 0)
        space.grid(row = 3, column = 0)
        label_key.grid(row = 4, column = 0)
        space1.grid(row = 5, column = 0)
        self.key_pour_encrypter.grid(row = 6, column = 0)
        space2.grid(row = 7, column = 0)
        button_validate.grid(row = 8, column = 0)
        self.text1.grid(row = 9, column = 0)
        #space3.grid(row = 0, column = 40)
        label1.grid(row = 0, column = 150)
        space6.grid(row = 1, column = 150)
        self.message_a_decrypter.grid(row = 2, column = 150)
        space4.grid(row = 3, column = 150)
        label2.grid(row = 4, column = 150)
        space7.grid(row = 5, column = 150)
        self.key_pour_decrypter.grid(row = 6, column = 150)
        space5.grid(row = 7, column = 150)
        button_validate2.grid(row = 8, column = 150)
        self.text2.grid(row = 9, column = 150)
        button_effacer.grid(row = 5, column = 2)
        button.grid(row = 10, column = 2)

    def validation_cryptage(self, message_a_encrypter, key_pour_encrypter):
        msg = message_a_encrypter
        key = key_pour_encrypter
        if (msg == "" or key == ""):
            self.text1.config(text = "Veuillez rentrer les informations demandées")
            return (0)
        try :
            int (key)
        except :
            self.text1.config(text = "Le décallage doit être un nombre")
            return (0)
        self.text1.config(text = "\nmessage crypté :\n" +str(cesar_crypted(msg, key)))

    def validation_decryptage(self, message_a_encrypter, key_pour_encrypter):
        msg = message_a_encrypter
        key = key_pour_encrypter
        if (msg == "" or key == ""):
            self.text2.config(text = "Veuillez rentrer les informations demandées")
            return (0)
        try :
            int (key)
        except :
            self.text2.config(text = "Le décallage doit être un nombre")
            return (0)
        self.text2.config(text = "\nmessage décrypté :\n" + str(cesar_decrypted(msg, key)))

    def effacer(self):
        self.message_a_encrypter.delete(0, 'end')
        self.message_a_decrypter.delete(0, 'end')
        self.key_pour_encrypter.delete(0, 'end')
        self.key_pour_decrypter.delete(0, 'end')
        self.text1.config(text = "")
        self.text2.config(text = "")
        os.system('clear')

class PageThree(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        presentation = tk.Label(self, text = "Notre programme permet de vous montrer\nà quel point le code césar est très peu fiable.\n\nRentrez d'abord votre message puis le nombre de décalage\n", font=controller.title_font, fg = "black")
        button = tk.Button(self, text="Retour", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 10, height = 1, command=lambda: controller.show_frame("StartPage"))
        message1_a_coder = tk.Entry(self, width = 50)
        space = tk.Label(self, text = "\n\n")
        space2 = tk.Label(self, text = "\n\n")
        key1_pour_coder = tk.Entry(self)
        self.resultat = tk.Label(self, text="\n", font=controller.title_font, fg = "black")
        validate_button = tk.Button(self, text = "Valider", font = controller.title_font10, fg = "black", bg = "white", activeforeground = "white", activebackground = "black", width = 10, height = 1, command = lambda: self.test_force_brut(message1_a_coder.get(), key1_pour_coder.get()))

        presentation.pack()
        message1_a_coder.pack()
        space.pack()
        key1_pour_coder.pack()
        space2.pack()
        validate_button.pack()
        self.resultat.pack()
        button.pack()

    def test_force_brut(self, a, b):
        msg = a
        key = b
        if (msg == "" or key == ""):
            self.resultat.config(text = "Veuillez rentrer les deux informations attendues\n")
            return (0)
        try :
            int(key)
        except :
            self.resultat.config(text = "Le décalage est un nombre")
            return (0)
        self.resultat.config(text = "Temps pour cracker la clé :" + str(try_force_brut(msg, key)) + "\n")


if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()